# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_CONNECT_REPO - autoconnect docker hub repo, format: <username>/<repo>
# DOCKERHUB_ENDPOINT_REPO - autoendpoint docker hub repo, format: <username>/<repo>
# DOCKER_EMAIL   - login info for docker hub
# DOCKER_USER
# DOCKER_PASS
# DOCKERHUB_LOAD_TEST_REPO - Docker Hub repo for load tests, format: <username>/<repo>
# DOCKER_LOAD_TEST_PASS - Docker Hub load test repo password
# DOCKER_LOAD_TEST_USER - Docker Hub load test repo user

version: 2.1

commands:
  docker_login:
    parameters:
      load:
        type: boolean
        default: False
    steps:
      - run:
          name: Login to Dockerhub
          command: |
            USER="${DOCKER_USER}"
            PASS="${DOCKER_PASS}"
            if <<parameters.load>>; then
              echo "Using load test repository credentials"
              USER="${DOCKER_LOAD_TEST_USER}"
              PASS="${DOCKER_LOAD_TEST_PASS}"
            fi
            if [ "${USER}" == "" ] || [ "${PASS}" == "" ]; then
              echo "Skipping Login to Dockerhub, no credentials."
            else
              echo "${PASS}" | docker login -u="${USER}" --password-stdin
            fi

jobs:
  audit:
    docker:
      # NOTE: update version for all # RUST_VER
      - image: rust:1.76
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS

    resource_class: large
    steps:
      - checkout
      - run:
          name: Setup cargo-audit
          command: |
            rustc --version
            cargo install cargo-audit
      - run:
          command: cargo audit

  python-checks:
    docker:
      - image: python:3.12-slim-bullseye
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - run:
          name: Set up system
          command: |
            apt update
            apt install git -y
            apt install cmake -y
      - run:
          name: Set up Python
          command: |
            pip install --upgrade pip
            pip install poetry
      - run:
          name: isort, black, flake8, pydocstyle and mypy
          command: make lint

  test:
    docker:
      - image: python:3.12-slim-bullseye
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          RUST_BACKTRACE: 1
      - image: amazon/dynamodb-local:latest
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        command: -jar DynamoDBLocal.jar -sharedDb
      - image: google/cloud-sdk:latest
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        command: gcloud beta emulators bigtable start --host-port=localhost:8086
    resource_class: xlarge
    environment:
      BIGTABLE_EMULATOR_HOST: localhost:8086
      AWS_LOCAL_DYNAMODB: http://localhost:8000
    steps:
      - checkout
      # Need to download the poetry.lock files so we can use their
      # checksums in restore_cache.
      - restore_cache:
          name: Restoring Rust cache
          key: rust-v1-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Create Workspace
          command: mkdir -p workspace
      - run:
          name: Set up system
          command: |
            apt update
            apt install libssl-dev apt-transport-https ca-certificates gnupg curl -y
      - run:
          name: Set up cbt
          command: |
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
            apt-get update -y
            apt install google-cloud-cli-cbt -y
      - run:
          name: Set up Python
          command: |
            pip install --upgrade pip
            pip install poetry
      - run:
          name: Set up Rust
          command: |
            apt update
            apt install build-essential curl libstdc++6 libstdc++-10-dev libssl-dev pkg-config -y
            apt install cmake -y
            # RUST_VER
            curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain 1.76 -y
            export PATH=$PATH:$HOME/.cargo/bin
            echo 'export PATH=$PATH:$HOME/.cargo/bin' >> $BASH_ENV
            rustc --version
            cargo build --features=emulator --features=dual
      - run:
          name: Check formatting
          command: |
            cargo fmt -- --check
            cargo clippy --all --all-targets --all-features -- -D warnings --deny=clippy::dbg_macro
      - run:
          name: Setup Bigtable
          command: scripts/setup_bt.sh
      - run:
          name: Rust tests
          # Note: This build can potentially exceed the amount of memory availble to the CircleCI instance.
          # We've seen that limiting the number of jobs helps reduce the frequency of this. (Note that
          # when doing discovery, we found that the docker image `meminfo` and `cpuinfo` often report
          # the machine level memory and CPU which are far higher than the memory allocated to the docker
          # instance. This may be causing rust to be overly greedy triggering the VM to OOM the process.)
          command: cargo test --features=emulator --features=dual --jobs=2
      - run:
          name: Integration tests (Bigtable)
          command: make integration-test
          environment:
            DB_DSN: grpc://localhost:8086
            TEST_RESULTS_DIR: workspace/test-results
      - run:
          name: Integration tests (DynamoDB)
          command: make integration-test
          environment:
            TEST_RESULTS_DIR: workspace/test-results
      - run:
          name: Integration tests (Dual Bigtable/DynamoDB)
          command: make integration-test
          environment:
            RUST_LOG: autopush=debug,autopush_common=debug,autoendpoint=debug,autoconnect=debug,slog_mozlog_json=info,warn
            # PYTEST_ARGS: -sv
            DB_DSN: dual
            DB_SETTINGS: tests/integration/dual_test.json
            TEST_RESULTS_DIR: workspace/test-results
      - store_test_results:
          path: workspace/test-results
      - save_cache:
          name: Save Rust cache
          key: rust-v1-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ checksum "Cargo.lock" }}
          paths:
            - target
            - ~/.cargo/registry
            - ~/.cargo/git

  build:
    docker:
      - image: docker:18.03.0-ce
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    resource_class: large
    working_directory: /dockerflow
    parameters:
      image:
        type: string
      crate:
        type: string
      binary:
        type: string
    steps:
      # Install these packages before checkout because git may not exist or work
      - run:
          name: Install Docker build dependencies
          command: apk add --no-cache openssh-client git
      - checkout
      - setup_remote_docker
      - docker_login
      - run:
          name: Create a version.json
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json
      - run:
          name: Build Docker image
          command: |
            docker build -t <<parameters.image>> \
              --build-arg CRATE=<<parameters.crate>> \
              --build-arg BINARY=<<parameters.binary>> .
      # save the built docker container into CircleCI's workspace cache. This is
      # required since Workflows do not have the same remote docker instance.
      - run:
          name: docker save <<parameters.image>>
          command: mkdir -p /cache; docker save -o /cache/docker.tar "<<parameters.image>>"
      - persist_to_workspace:
          root: /cache
          paths:
            - docker.tar

  build-load-test:
    docker:
      - image: cimg/base:2023.12
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Image
          command: docker build -t autopush-locust -f ./tests/load/Dockerfile .
      - run:
          name: Save Docker Image to Workspace
          command: |
            mkdir -p /tmp/workspace
            docker save -o /tmp/workspace/autopush-locust.tar autopush-locust
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - autopush-locust.tar

  deploy:
    docker:
      - image: docker:18.03.0-ce
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    parameters:
      image:
        type: string
      repo:
        type: string
    steps:
      - setup_remote_docker
      - docker_login
      - attach_workspace:
          at: /cache
      - run:
          name: Restore Docker image cache
          command: docker load -i /cache/docker.tar
      - run:
          name: Deploy to Dockerhub
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              # deploy master
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker tag <<parameters.image>> <<parameters.repo>>:latest
              docker push <<parameters.repo>>:latest
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
              # deploy a release tag
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              echo "<<parameters.repo>>:${CIRCLE_TAG}"
              docker tag <<parameters.image>> "<<parameters.repo>>:${CIRCLE_TAG}"
              docker images
              docker push "<<parameters.repo>>:${CIRCLE_TAG}"
            fi

  deploy-load-test:
    docker:
      - image: cimg/base:2023.12
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load Docker Image From Workspace
          command: docker load -i /tmp/workspace/autopush-locust.tar
      - docker_login:
          load: True
      - run:
          name: Push to Docker Hub
          command: |
            echo ${DOCKERHUB_LOAD_TEST_REPO}:${CIRCLE_SHA1}
            docker tag autopush-locust ${DOCKERHUB_LOAD_TEST_REPO}:${CIRCLE_SHA1}
            docker tag autopush-locust ${DOCKERHUB_LOAD_TEST_REPO}:latest
            docker images
            docker push "${DOCKERHUB_LOAD_TEST_REPO}:${CIRCLE_SHA1}"
            docker push "${DOCKERHUB_LOAD_TEST_REPO}:latest"

workflows:
  version: 2

  build-test-deploy:
    jobs:
      - audit:
          filters:
            tags:
              only: /.*/
      - python-checks:
          filters:
            tags:
              only: /.*/
      - test:
          filters:
            tags:
              only: /.*/

      - build:
          name: build-autoconnect
          image: autoconnect:build
          crate: autoconnect
          binary: autoconnect
          filters:
            tags:
              only: /.*/

      - build:
          name: build-autoendpoint
          image: autoendpoint:build
          crate: autoendpoint
          binary: autoendpoint
          filters:
            tags:
              only: /.*/

      - build-load-test:
          filters:
            tags:
              only: /.*/

      # Comment out the following two sections for local CircleCI testing.
      - deploy:
          name: deploy-autoconnect
          image: autoconnect:build
          repo: ${DOCKERHUB_CONNECT_REPO}
          requires:
            - build-autoconnect
            - test
          filters:
            tags:
              only: /.*/
            branches:
              only: master

      - deploy:
          name: deploy-autoendpoint
          image: autoendpoint:build
          repo: ${DOCKERHUB_ENDPOINT_REPO}
          requires:
            - build-autoendpoint
            - test
          filters:
            tags:
              only: /.*/
            branches:
              only: master

      - deploy-load-test:
          requires:
            - build-load-test
            - python-checks
          filters:
            tags:
              only: /.*/
            branches:
              only: master
